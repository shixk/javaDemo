package com.xuekai.test;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.TypeReference;
import com.google.common.collect.Lists;
import com.google.common.collect.Maps;
import com.xuekai.utils.JodaTimeUtil;
import javafx.util.Pair;
import org.springframework.format.datetime.DateFormatter;

import java.util.*;

/**
 * @Author shixuekai
 * @CreateDate 2021/5/8
 * @Description
 **/
public class Txtest2 {
//    {101, 80, 20, -1, 50, 1000000, 100, 30, 50, 20, 50}
//    length = N
//    K = 100
//
//    O(N)时间空间复杂度内，找到所有加和等于K的数对
//
//    {101, -1}
//    {80, 20}
//    {50, 50}

    public static void main(String[] args) {
        String source =  "{'location': [[68, 21, 94, 21, 94, 52, 68, 52], [102, 11, 128, 11, 128, 41, 102, 41], [260, 21, 276, 21, 276, 52, 260, 52], [304, 21, 320, 21, 320, 52, 304, 52], [378, 21, 415, 21, 415, 52, 378, 52], [773, 11, 799, 11, 799, 61, 773, 61], [807, 20, 874, 20, 874, 61, 807, 61], [949, 20, 1015, 20, 1015, 61, 949, 61], [1047, 42, 1079, 42, 1079, 83, 1047, 83], [44, 115, 74, 115, 74, 167, 44, 167], [119, 115, 526, 115, 526, 167, 119, 167], [71, 261, 249, 261, 249, 322, 71, 322], [71, 324, 242, 324, 242, 386, 71, 386], [243, 335, 320, 335, 320, 365, 243, 365], [382, 335, 398, 335, 398, 355, 382, 355], [404, 334, 569, 334, 569, 375, 404, 375], [905, 323, 1009, 323, 1009, 385, 905, 385], [162, 512, 435, 512, 435, 574, 162, 574], [98, 648, 276, 648, 276, 699, 98, 699], [286, 647, 542, 647, 542, 698, 286, 698], [551, 648, 647, 648, 647, 699, 551, 699], [98, 711, 276, 711, 276, 762, 98, 762], [287, 700, 620, 700, 620, 762, 287, 762], [868, 711, 941, 711, 941, 762, 868, 762], [1003, 690, 1079, 690, 1079, 762, 1003, 762], [98, 774, 712, 774, 712, 835, 98, 835], [358, 849, 579, 812, 589, 876, 368, 913], [94, 934, 274, 921, 278, 980, 98, 993], [287, 941, 543, 941, 543, 981, 287, 981], [551, 930, 647, 930, 647, 981, 551, 981], [98, 993, 279, 993, 279, 1044, 98, 1044], [287, 993, 620, 993, 620, 1044, 287, 1044], [868, 993, 941, 993, 941, 1044, 868, 1044], [98, 1055, 606, 1055, 606, 1106, 98, 1106], [736, 1096, 779, 1096, 779, 1137, 736, 1137], [98, 1223, 280, 1223, 280, 1274, 98, 1274], [287, 1223, 543, 1223, 543, 1274, 287, 1274], [0, 1254, 94, 1254, 94, 1316, 0, 1316], [551, 1212, 647, 1212, 647, 1274, 551, 1274], [98, 1285, 280, 1285, 280, 1337, 98, 1337], [287, 1275, 624, 1275, 624, 1337, 287, 1337], [868, 1285, 941, 1285, 941, 1337, 868, 1337], [98, 1348, 644, 1348, 644, 1399, 98, 1399], [574, 1472, 978, 1472, 978, 1524, 574, 1524], [58, 1630, 275, 1630, 275, 1692, 58, 1692], [58, 1703, 940, 1703, 940, 1765, 58, 1765], [54, 1766, 877, 1766, 877, 1828, 54, 1828], [902, 1766, 995, 1766, 995, 1828, 902, 1828], [58, 1829, 435, 1829, 435, 1880, 58, 1880], [459, 1829, 887, 1829, 887, 1880, 459, 1880], [210, 2099, 869, 2099, 869, 2140, 210, 2140], [345, 2151, 739, 2151, 739, 2192, 345, 2192], [536, 486, 636, 468, 645, 522, 545, 540], [919, 394, 1078, 361, 1079, 425, 933, 457], [0, 1933, 178, 1879, 193, 1932, 0, 1986], [0, 2257, 313, 2179, 327, 2235, 5, 2313], [840, 2062, 994, 2024, 1007, 2077, 853, 2115]], 'results_str': ['HD', '4G', '国', 'Q', '支', '8', '58%', '2:23', '3', '^', '核酸检测结果查询', '查询人员:', '冷*怡51', '****', '*', '******44', '切换', '省内核酸结果', '采样时间:', '2022-07-28', '19时', '检测时间:', '2022-07-292时', '阴性', '沈好', '成都高新区佳医医学检验实验室17', '沈婧DX336', '采样时间:', '2022-07-26', '19时', '检测时间:', '2022-07-272时', '阴性', '成都高新华曦医学检验实验室', '17', '采样时间:', '2022-07-24', '6501', '19时', '检测时间:', '2022-07-255时', '阴性', '成都高新区佳医医学检验实验室', '查看更多核酸检测结果>>', '服务说明:', '1.本服务支持查询本人14日内核酸检测结果。', '2.相关查询结果基于卫生健康部门数据库,', '根据', '各地检测数据提供,', '正在不断汇聚更新中。', '四川省应对新型冠状病毒肺炎疫情应急指挥部', '四川省大数据中心提供支持', '5017', '沈婧DX', '青DX3365', '沈婧DX336501', '65017']}\"";
        Map<String, List<String>> recogResult = JSON.parseObject(source,
                new TypeReference<Map<String, List<String>>>() {
                });

        List<String> resultStr = recogResult.getOrDefault("results_str", new ArrayList<>());
        // 只计算到第一个
        for (int i = 0; i < resultStr.size() - 1; i++) {
            // 匹配 “检测时间” 关键字
            if("检测时间:".equals(resultStr.get(i))){
                String dateStr = resultStr.get(i+1).replace("时","");
                //2022-07-272
                if(dateStr.length()==11){
                    dateStr = dateStr.substring(0,10)+"0"+dateStr.substring(10);
                }
                dateStr = dateStr.concat("0000");

                Date healthDate = JodaTimeUtil.parseStringToDate(dateStr,JodaTimeUtil.YYYY_MM_DD_HH_mm_SS);
                System.out.println(healthDate);
                break;
            }
        }
    }
}
